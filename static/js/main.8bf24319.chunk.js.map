{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Track","props","renderAction","bind","addTrack","removeTrack","sign","onClick","this","isRemoval","className","onAdd","track","onRemove","name","artist","album","React","Component","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","plalistName","tracksURIs","usersID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","find","savedTrack","newPlaylistTracks","push","filter","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bf24319.chunk.js","sourcesContent":["let accessToken;\nconst clientID = '0ba437534c6b40dbbf11a0dd8eafd6ac';            //process.env.REACT_APP_JAMMMING_CLIENT_ID;\nconst redirectURI = 'http://localhost:3000';\n// console.log(process.env.REACT_APP_JAMMMING_CLIENT_ID);\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        \n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            // console.log(accessTokenMatch[1]);\n            accessToken = accessTokenMatch[1];\n            // console.log(expiresInMatch[1]);\n            const expiresIn = Number(expiresInMatch[1]);\n            \n            window.setTimeout(() => accessToken = '' , expiresIn * 1000);\n            window.history.pushState('Access Token' , null , '/');\n\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n            window.location = accessUrl;\n        }\n    }\n    ,\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(\n            `https://api.spotify.com/v1/search?type=track&q=${term}`, {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            }).then(response => {\n                // console.log(response.json());\n                return response.json();\n            }).then((jsonResponse) => {\n                // console.log(jsonResponse);\n                if (!jsonResponse.tracks) {\n                    return [];\n                } else {\n                    return jsonResponse.tracks.items.map(track => {\n                        // console.log(track);\n                        return {\n                            id: track.id ,\n                            name: track.name , \n                            artist: track.artists[0].name , \n                            album: track.album.name ,\n                            uri: track.uri \n                        };\n                    });\n                }\n            });\n    } \n    ,\n    savePlaylist(plalistName , tracksURIs) {\n        if (plalistName && tracksURIs) {\n            const accessToken = Spotify.getAccessToken();\n            const headers = { Authorization: `Bearer ${accessToken}` };\n            let usersID;\n\n            return fetch(\n                'https://api.spotify.com/v1/me' , \n                { headers: headers }\n            ).then(response => {\n                return response.json();\n            }).then((jsonResponse) => {\n                usersID = jsonResponse.id;\n                return fetch(\n                    `https://api.spotify.com/v1/users/${usersID}/playlists` ,\n                    {\n                        headers: headers , \n                        method: 'POST' , \n                        body: JSON.stringify({ name: plalistName })\n                    }\n                ).then(response => {\n                   return response.json();\n                }).then((jsonResponse) => {\n                   const playlistID = jsonResponse.id;\n                   return fetch(`https://api.spotify.com/v1/users/${usersID}/playlists/${playlistID}/tracks` , {\n                       headers: headers ,\n                       method: 'POST' ,\n                       body: JSON.stringify({ uris: tracksURIs })\n                   });\n                });\n            });\n\n        } else {\n            return;\n        }\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.renderAction = this.renderAction.bind(this);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        let sign;\n        let onClick;\n        if (this.props.isRemoval) {\n            sign = '-';\n            onClick = this.removeTrack;\n        } else {\n            sign = '+';\n            onClick = this.addTrack;\n        }\n         \n        return<button \n                className=\"Track-action\" \n                onClick={onClick}>{sign}</button>\n            \n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n       this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        const { track } = this.props;\n\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{track.name}</h3>\n                    <p>{track.artist} | {track.album}</p>\n                </div>\n                {this.renderAction()}      \n            </div>   \n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return(\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map((track) => {\n                        return <Track \n                            id={track.id} \n                            key={track.id}\n                            track={track}\n                            onAdd={this.props.onAdd} \n                            onRemove={this.props.onRemove} \n                            isRemoval={this.props.isRemoval}></Track>;\n                    })\n                }\n            </div>            \n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList \n                    tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval={false}></TrackList>\n            </div>            \n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input \n                    defaultValue={\"New Playlist\"} \n                    onChange={this.handleNameChange} />\n                {/* <h1>{this.props.playlistName}</h1> */}\n                <TrackList \n                    tracks={this.props.playlistTracks} \n                    isRemoval={true} \n                    onRemove={this.props.onRemove}></TrackList>\n                <button className=\"Playlist-save\"\n                        onClick={this.props.onSave}>\n                    SAVE TO SPOTIFY\n                </button>\n            </div>            \n        );\n    }\n}\n\nexport default Playlist; ","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        this.setState({\n            term: event.target.value\n        });\n        this.search();\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" \n                    onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\"\n                    onClick={this.search}>SEARCH</button>\n            </div>            \n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './App.css';\n\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Spotify from '../../util/Spotify';\n\n/* const searchResult1 = {\n  name: 'Agua' ,\n  artist: 'J. Balvin & Tiny' ,\n  album: 'Bob Sponge movie' ,\n  id: '0'\n};\n\nconst searchResult2 = {\n  name: 'Tak Tiki Tak' ,\n  artist: 'Harry Nach' ,\n  album: 'Single' ,\n  id: '1'\n};\n\nconst searchResults = [\n  searchResult1 ,\n  searchResult2\n]; */\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      searchResults: [] ,\n      playlistName: 'Top 50' , \n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    const playlistTracks = this.state.playlistTracks;\n\n    if (playlistTracks.find((savedTrack) => {\n      return savedTrack.id === track.id;\n    })) {\n      return;\n    }\n    \n    const newPlaylistTracks = playlistTracks;\n    newPlaylistTracks.push(track);\n\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n\n  removeTrack(track) {\n    const playlistTracks = this.state.playlistTracks;\n    \n    const newPlaylistTracks = playlistTracks.filter((savedTrack) => {\n      return savedTrack.id !== track.id;\n    });\n\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    let playlistName = this.state.playlistName;\n\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist' ,\n        playlistTracks: []\n      });\n    });\n\n  }\n\n  search(term) {\n    // console.log(term);\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>On<span className=\"highlight\">ga</span>ku</h1>\n        <div className=\"App\">\n          <SearchBar\n            onSearch={this.search}></SearchBar>\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack}></SearchResults>\n           <Playlist \n                         playlistTracks={this.state.playlistTracks}\n                         // playlistName={this.state.playlistName}\n                         onRemove={this.removeTrack}\n                         onNameChange={this.updatePlaylistName}\n                         onSave={this.savePlaylist}></Playlist>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}